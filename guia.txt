Instalando angular via npm:
    npm install -g @angular/cli

Criar a primeira aplicação:
    ng new tarefas      <<--- tarefas é o nome da aplicação

Ao criar a aplicação com o angular cli, para iniciar um simples servidor e verificar o funcionamento:
    ng serve --open     <<--- Isso irá abrir o browser em http://localhost:4200/

A estrutura de pastas criada ficará da seguinte forma:

    tarefas/
    ├─ e2e/
    ├─ node_modules/
    ├─ src/
    ├─ package.json
    ├─ .angular-cli.json
    ├─ .editorconfig
    ├─ .gitignore
    ├─ karma.conf.js
    ├─ protractor.conf.js
    ├─ README.md
    ├─ tsconfig.json
    └─ tslint.json

    Descritos abaixo:

    O diretório e2e (de end-to-end tests) contém recursos para testarmos a aplicação. Não ficam dentro da pasta src, porque se trata de uma outra aplicação (para testar a sua).
    O diretório node_modules contém todos os pacotes que usaremos, baixados pelo npm. As bibliotecas do Angular também estão instaladas nesse diretório.
    O diretório src contém o código da nossa aplicação e é onde trabalharemos.
    O arquivo package.json contém a lista de pacotes usados na sua aplicação.
    O arquivo .angular-cli.json contém configurações do Angular CLI.
    O arquivo .editorconfig contém configurações para o seu editor compatível com o padrão (ex.: Visual Studio Code).
    O arquivo .gitignore contém a lista de arquivos autogerados que não devem ser exportados para o GIT.
    O arquivo karma.conf.js contém configurações de testes de unidade para o Karma.
    O arquivo protractor.conf.js contém as configurações do framework Protractor de testes end-to-end.
    O arquivo README.md contém a documentação básica do projeto para publicação no repositório.
    O arquivo tsconfig.json contém as configurações do compilador de TypeScript.
    O arquivo tslint.json contém configurações para análise sintática com o TSLint.

Dentro da pasta src a aplicação estará criada com a seguinte estrutura:

    tarefas/
    └─ src/
        ├─ app/
        ├─ assets/
        ├─ favicon.ico
        ├─ index.html
        ├─ main.ts
        ├─ styles.css
        ├─ polyfill.ts
        ├─ test.ts
        ├─ tsconfig.app.json
        ├─ tsconfig.spec.json
        └─ typings.d.ts

    O diretório app é o principal local da nossa aplicação. Entretanto, podemos distribuir o código por outros diretórios, se assim desejarmos.
    O diretório assets é um local para recursos diversos como imagens e arquivos de estilos.
    Os arquivos favicon.ico, index.html e styles.css são aquilo que parecem ser: o ícone, a página principal e uma folha de estilos geral.
    O arquivo main.ts é responsável pela inicialização da nossa aplicação.
    O arquivo polyfill.ts oferece o suporte para os diversos tipos de navegadores. Ele normaliza as diferenças entre eles.
    O arquivo test.ts define o ponto inicial dos testes de unidade.
    Os arquivos tsconfig.app.json e tsconfig.spec.json contêm as configurações de compilação para a aplicação e para os testes de unidade.
    O arquivo typings.d.ts contém declarações personalizadas de tipos Typescript.

    O diretório da nossa aplicação, app contém os arquivos criados automaticamente pelo Angular CLI. São eles:

    tarefas/
    └─ src/
      └─ app/
            ├─ app.module.ts
            ├─ app.component.ts
            ├─ app.component.html
            ├─ app.component.css
            └─ app.component.spec.ts

    Esses são os arquivos principais da nossa aplicação. O arquivo app.component.ts contém o nosso 
    componente principal, AppComponent, responsável por chamar cada um dos outros. 
    Os arquivos app.component.html e app.component.css são os arquivos responsáveis pela visão do
    componente principal e o arquivo app.component.spec.ts é um arquivo usado no teste de unidade 
    do componente principal (todo arquivo .ts terá o arquivo de teste .spec.ts). 
    
    O arquivo app.module.ts contém a estrutura da nossa aplicação, fazendo uma referência para cada 
    um dos outros recursos.  
    Neste momento, o único recurso especificado no módulo é o componente principal AppComponent.

    =====================================================================================================

    Um componente controla um pedaço da página, chamado de visão. Um componente é apenas uma classe e o 
    objetivo dessa classe é apenas gerar HTML. Uma página, construida com vários componentes, será montada
    com a combinação desses componentes.

    Na arquitetura do Angular, um componente controla um pedaço da página web chamado visão. 
    Os componentes, assim, compõem a interface do usuário com a aplicação web. Criaremos alguns componentes 
    que nos permitirão gerar e manipular uma lista de tarefas.

    A visão de cada componente é definida por meio de um template. Um template é um trecho de código HTML que 
    indica ao Angular como apresentar o componente. Um template permite a inserção, no meio do código HTML, 
    de expressões TypeScript que usem dados do componente.

    Os templates são estruturas dinâmicas. Seus conteúdos podem ser atualizados automaticamente, na medida em 
    que o usuário interage com a aplicação.  Para criarmos conteúdo dinâmico, precisamos explicar ao Angular 
    como fazer isso por meio de diretivas. Uma diretiva é uma estrutura que permite a criação de conteúdo dinâmico.

    As diretivas podem ser de estrutura ou de atributos. Uma diretiva de estrutura altera o layout por meio 
    da criação ou remoção de elementos do DOM. Uma diretiva de atributos altera o comportamento de um elemento 
    já existente.

    Sob um ponto de vista técnico, um componente também é uma diretiva, já que cria conteúdos dinâmicos.

    ===========================================================================

    Uma interpolação é a inserção de uma expressão no meio do código HTML. Essa expressão pode ou não usar 
    propriedades e métodos do componente. Expressões interpoladas são delimitadas por chaves duplas {{ e }}.

   Aqui, temos duas expressões interpoladas. Na primeira, interpolamos a propriedade ano. Na segunda, 
   interpolamos a propriedade autor. Nada nos impede, no entanto, de criar uma única expressão da seguinte 
   forma:
    
   <p><small>© {{ano + ' ' + autor}}</small></p> 

   Podemos manter o valor inicial na declaração, como está, ou podemos defini-lo no construtor da classe. 
   O construtor é um método chamado constructor() e é executado imediatamente quando um objeto da classe 
   é criado.

    ======================================================================================

   Os tipos básicos em TypeScript são boolean, number e string. Não há tipos para carateres ou tipos 
   separados para números inteiros e números reais. 

   Podemos criar vetores das seguintes formas:

    * Vetores - Declarados com tipos
    let lista: number[] = [1, 2, 3];
    let lista: Array<number> = [1, 2, 3];

    * Para misturar tipos, usar tuplas
    let cliente: [string, number] = ['José Couves', 35];

    Em ambos os casos, os itens do vetor ou da tupla são acessados por meio dos índices (iniciados em zero). 

    Um tipo particularmente interessante em TypeScript é a enumeração (iniciada em zero ou com valores atribuídos manualmente). Podemos ter, por exemplo, uma enumeração de prioridades da seguinte forma:

    enum prioridade {Baixa, Média, Alta};

    Os valores nessa enumeração são atribuídos automaticamente, sendo 0 para prioridade.Baixa, 1 para prioridade.Média e 2 para prioridade.Alta.

A atribuição manual poderia ser da seguinte forma (em que os valores são meio óbvios):

enum resultado {Insuficiente=40, Regular=60, Bom=80};
Em algumas situações, o valor da variável pode ser desconhecido previamente e precisaremos usar um tipo genérico. A solução para isso é o tipo any. Uma variável desse tipo pode assumir qualquer valor, como nestas atribuições:

let desconhecido: any;
desconhecido = 4; 
desconhecido = "uma string"; 
desconhecido = false;

Quando uma função não retorna valor, o tipo a ser usado é void. Veja este exemplo:

function alerta(msg): void {
  alert(msg);
}
Ocasionalmente, precisaremos converter uma valor de um tipo em um valor de outro tipo. Isso já acontece frequentemente, quando concatenamos uma string e um número. Esse número é convertido automaticamente em string. Mas, em TypeScript, podemos fazer essas coersões de tipos explicitamente de duas formas:

let coisa: any = "esta é uma string"; 
let comprimento: number = (<string>coisa).length;

let coisa: any = "esta é uma string"; 
let comprimento: number = (coisa as string).length;

=============================================================================================

Uma diretiva é uma estrutura que permite a criação de conteúdo dinâmico. Isso significa que ela 
pode alterar a página por meio da criação ou remoção de elementos ou por meio da alteração de 
elementos já existentes. A diretiva que altera a estrutura do documento, criando ou removendo 
elementos, é chamada de diretiva de estrutura. 

O Angular oferece um conjunto de diretivas de estrutura internas que nos ajudam a construir a página. 
São as diretivas NgForOf, NgIf e NgSwitch. A diretiva NgForOf é usada para apresentar coleções de dados, 
como um vetor. 
A diretiva NgIf é usada para apresentar um elemento apenas se uma determinada condição for satisfeita. 
A diretiva NgSwitch nos permite escolher um entre vários elementos, a partir de uma outra condição.


NgForOf
A diretiva NgForOf é usada para criarmos elementos a partir de coleções de dados (como um vetor). 
Elas nos permitem, assim, criar um elemento para cada item da coleção. Veja essa diretiva em uso 
nessa nova versão do arquivo src/app/tarefas.component.ts:

import { Component } from '@angular/core';

@Component({
  selector: 'tarefas',
  template: `
    <ul>
      <li *ngFor="let tarefa of tarefas">{{tarefa}}</li>
    </ul>
  `
})
export class TarefasComponent { 

  tarefas: string[];

  constructor() {
    this.tarefas = [ 
      'Comprar leite',
      'Pagar a conta de luz', 
      'Consertar a cafeteira'
    ];
  }

}

A diretiva NgForOf possui ainda alguns outros valores que podem ser usados nas iterações. 
Os principais são:

index - Variável numérica que indica o índice (iniciado em zero) do item no vetor.
first - Variável lógica que indica se este é o primeiro item do vetor.
last - Variável lógica que indica se este é o último item do vetor.
even - Variável lógica que indica se este item possui um índice par.
odd - Variável lógica que indica se este item possui um índice ímpar.
A instrução a seguir ilustra o uso desses valores:

<li *ngFor="let tarefa of tarefas; index as i">
  {{i+1}} - {{tarefa}}
</li>